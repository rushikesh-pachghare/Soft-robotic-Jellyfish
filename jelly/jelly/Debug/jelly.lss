
jelly.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fd  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059a  00000000  00000000  00000921  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f1  00000000  00000000  00000ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000012ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000303  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015f  00000000  00000000  00001603  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001762  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	2e d0       	rcall	.+92     	; 0x90 <main>
  34:	78 c0       	rjmp	.+240    	; 0x126 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <init>:

}
void UART_TxChar(char ch)
{
	while (! (UCSRA & (1<<UDRE)));  /* Wait for empty transmit buffer */
	UDR = ch ;
  38:	18 ba       	out	0x18, r1	; 24
  3a:	17 ba       	out	0x17, r1	; 23
  3c:	15 ba       	out	0x15, r1	; 21
  3e:	14 ba       	out	0x14, r1	; 20
  40:	12 ba       	out	0x12, r1	; 18
  42:	80 ee       	ldi	r24, 0xE0	; 224
  44:	81 bb       	out	0x11, r24	; 17
  46:	13 be       	out	0x33, r1	; 51
  48:	12 be       	out	0x32, r1	; 50
  4a:	1f bc       	out	0x2f, r1	; 47
  4c:	1e bc       	out	0x2e, r1	; 46
  4e:	1d bc       	out	0x2d, r1	; 45
  50:	1c bc       	out	0x2c, r1	; 44
  52:	17 bc       	out	0x27, r1	; 39
  54:	16 bc       	out	0x26, r1	; 38
  56:	1b bc       	out	0x2b, r1	; 43
  58:	1a bc       	out	0x2a, r1	; 42
  5a:	19 bc       	out	0x29, r1	; 41
  5c:	18 bc       	out	0x28, r1	; 40
  5e:	12 bc       	out	0x22, r1	; 34
  60:	15 bc       	out	0x25, r1	; 37
  62:	14 bc       	out	0x24, r1	; 36
  64:	13 bc       	out	0x23, r1	; 35
  66:	15 be       	out	0x35, r1	; 53
  68:	19 be       	out	0x39, r1	; 57
  6a:	1b b8       	out	0x0b, r1	; 11
  6c:	80 e1       	ldi	r24, 0x10	; 16
  6e:	8a b9       	out	0x0a, r24	; 10
  70:	86 e8       	ldi	r24, 0x86	; 134
  72:	80 bd       	out	0x20, r24	; 32
  74:	10 bc       	out	0x20, r1	; 32
  76:	83 e3       	ldi	r24, 0x33	; 51
  78:	89 b9       	out	0x09, r24	; 9
  7a:	80 e8       	ldi	r24, 0x80	; 128
  7c:	88 b9       	out	0x08, r24	; 8
  7e:	10 be       	out	0x30, r1	; 48
  80:	16 b8       	out	0x06, r1	; 6
  82:	1d b8       	out	0x0d, r1	; 13
  84:	16 be       	out	0x36, r1	; 54
  86:	08 95       	ret

00000088 <UART_RxChar>:
}
unsigned char UART_RxChar()
{
	while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
  88:	5f 9b       	sbis	0x0b, 7	; 11
  8a:	fe cf       	rjmp	.-4      	; 0x88 <UART_RxChar>
	return(UDR);		/* Return the byte */
  8c:	8c b1       	in	r24, 0x0c	; 12
}
  8e:	08 95       	ret

00000090 <main>:

int main(void)
{
 unsigned char input;
 /* Replace with your application code */
 init();
  90:	d3 df       	rcall	.-90     	; 0x38 <init>
 while (1)
 {
	 input =UART_RxChar();
  92:	fa df       	rcall	.-12     	; 0x88 <UART_RxChar>
	 //all motors on
	 if(input == 'a')
  94:	81 36       	cpi	r24, 0x61	; 97
  96:	69 f4       	brne	.+26     	; 0xb2 <main+0x22>
	 {
		 setpin(PORTD, 5);
  98:	95 9a       	sbi	0x12, 5	; 18
		 setpin(PORTD, 6);
  9a:	96 9a       	sbi	0x12, 6	; 18
		 setpin(PORTD, 7);
  9c:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	84 e3       	ldi	r24, 0x34	; 52
  a2:	9c e0       	ldi	r25, 0x0C	; 12
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x14>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x1e>
  ae:	00 00       	nop
  b0:	f0 cf       	rjmp	.-32     	; 0x92 <main+0x2>
		 _delay_ms(500);
	 }
	 //motor 1 and 2 on
	 else if(input == 'b')
  b2:	82 36       	cpi	r24, 0x62	; 98
  b4:	69 f4       	brne	.+26     	; 0xd0 <main+0x40>
	 {
		 setpin(PORTD, 5);
  b6:	95 9a       	sbi	0x12, 5	; 18
		 setpin(PORTD, 6);
  b8:	96 9a       	sbi	0x12, 6	; 18
		 clearpin(PORTD, 7);
  ba:	97 98       	cbi	0x12, 7	; 18
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	84 e3       	ldi	r24, 0x34	; 52
  c0:	9c e0       	ldi	r25, 0x0C	; 12
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x32>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x3c>
  cc:	00 00       	nop
  ce:	e1 cf       	rjmp	.-62     	; 0x92 <main+0x2>
		 _delay_ms(500);
	 }
	 //motor 2 and 3 on
	 else if(input == 'c')
  d0:	83 36       	cpi	r24, 0x63	; 99
  d2:	69 f4       	brne	.+26     	; 0xee <main+0x5e>
	 {
		 setpin(PORTD, 6);
  d4:	96 9a       	sbi	0x12, 6	; 18
		 setpin(PORTD, 7);
  d6:	97 9a       	sbi	0x12, 7	; 18
		 clearpin(PORTD, 5);
  d8:	95 98       	cbi	0x12, 5	; 18
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	84 e3       	ldi	r24, 0x34	; 52
  de:	9c e0       	ldi	r25, 0x0C	; 12
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x50>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x5a>
  ea:	00 00       	nop
  ec:	d2 cf       	rjmp	.-92     	; 0x92 <main+0x2>
		 _delay_ms(500);
	 }
	 //motor 1 and 3 on
	 else if(input == 'd')
  ee:	84 36       	cpi	r24, 0x64	; 100
  f0:	69 f4       	brne	.+26     	; 0x10c <main+0x7c>
	 {
		 setpin(PORTD, 5);
  f2:	95 9a       	sbi	0x12, 5	; 18
		 setpin(PORTD, 7);
  f4:	97 9a       	sbi	0x12, 7	; 18
		 clearpin(PORTD, 6);
  f6:	96 98       	cbi	0x12, 6	; 18
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	84 e3       	ldi	r24, 0x34	; 52
  fc:	9c e0       	ldi	r25, 0x0C	; 12
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x6e>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x78>
 108:	00 00       	nop
 10a:	c3 cf       	rjmp	.-122    	; 0x92 <main+0x2>
		 _delay_ms(500);
	 }
	 //all motors off
	 else
	 {
		 clearpin(PORTD, 5);
 10c:	95 98       	cbi	0x12, 5	; 18
		 clearpin(PORTD, 6);
 10e:	96 98       	cbi	0x12, 6	; 18
		 clearpin(PORTD, 7);
 110:	97 98       	cbi	0x12, 7	; 18
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	84 e3       	ldi	r24, 0x34	; 52
 116:	9c e0       	ldi	r25, 0x0C	; 12
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x88>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x92>
 122:	00 00       	nop
 124:	b6 cf       	rjmp	.-148    	; 0x92 <main+0x2>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
